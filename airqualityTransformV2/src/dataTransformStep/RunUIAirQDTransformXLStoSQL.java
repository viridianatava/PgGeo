/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dataTransformStep;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;

/**
 *
 * @author Six
 */
public class RunUIAirQDTransformXLStoSQL extends javax.swing.JFrame {
    private ConexionMysqlDao daoMysql ;
    private int idElemento;
    /**
     * Creates new form InterfacePrincipal
     */
    public RunUIAirQDTransformXLStoSQL() {
        super("CDMX Air Quality Transform - UPIITA IPN");
        initComponents();
        this.daoMysql= new ConexionMysqlDao();
        this.daoMysql.RealizarConexion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        cargandoScript = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("RUN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Air Quality Mexico City Data Transform from XSL to SQL. Ver 2.0, 2018");

        jLabel2.setText("Step 1. Create the database structure, see  ./dbScripts folder ");

        jLabel3.setText("Step 2. Click on run buttom below");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setText("Laboratorio de Cómputo Móvil, UPIITA - IPN");

        jLabel5.setText("Step 3. Delete ./dataOutTransformed/DataMeasuresTemp.txt");

        jLabel6.setForeground(new java.awt.Color(255, 0, 51));
        jLabel6.setText("Result:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3))
                        .addGap(29, 29, 29)
                        .addComponent(cargandoScript, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel5))
                    .addComponent(cargandoScript, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(daoMysql.getConexion() != null){
            try {
                File dir = new File(".//dataFilesInput//");
                String[] ficheros = dir.list();
                System.out.println("Numero de archivos encontrados: "+ficheros.length);
                this.jLabel6.setText("Status:  "+ficheros.length+" files found");
                
                if (ficheros == null)
                    JOptionPane.showMessageDialog(null, "ERROR!!!: No se encontrarion archivos de entrada");
                else { 
                    for (int x=0;x<ficheros.length;x++){
                    System.out.println("Leyendo... "+ficheros[x]);    
                    procesandoExcelContaminantes(ficheros[x].replace(".xls", ""));
                    }
                    File f = new File(".//dataOutTransformed//DataMeasuresTemp.txt");
                    this.daoMysql.transferDataFromTxtToMeasureTable(f.getCanonicalPath());
                    this.jLabel6.setText("Status: Data has been loaded successfully, close the windows");
                    //f.deleteOnExit();
                    cargandoScript.setIndeterminate(false);
                }
            } catch (IOException ex) {
                   ex.printStackTrace();
                Logger.getLogger(RunUIAirQDTransformXLStoSQL.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                ex.printStackTrace();
                Logger.getLogger(RunUIAirQDTransformXLStoSQL.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public void procesandoExcelContaminantes(String nameFile) throws IOException, SQLException {
        cargandoScript.setIndeterminate(true);
                
         System.out.println("Proccesando archivo: "+nameFile);
        //nombre del archivo a leer
        //String nameFile = "2017SO2";        
        //ruta del archivo de excel
        String f = ".//dataFilesInput//"+nameFile+".xls";
        //obtiene el nombre del elemento segun el archivo leido
        nameFile=nameFile.substring(4, Integer.parseInt(nameFile.length()+""));
        idElemento= daoMysql.findByIdElemento(nameFile);
        //ArrayList para guardar los datos leidos del excel
        List sheetData = new ArrayList();
        //para jalar posteriormente el archivo
        FileInputStream fis = null;
        try {
            //se crea un flujo para leer el archivo de la ruta especificada anteriormente
            fis = new FileInputStream(f);
            //Se crea un libro del cual se jalaran los datos
            HSSFWorkbook book = new HSSFWorkbook(fis);
            //se indica que del libro creado se agarrara la primera hoja
            HSSFSheet sheet = book.getSheetAt(0);
            //iterador que nos permitira recorrer el contenido de la hoja y almacenarlo en el arraylist
            Iterator rows = sheet.rowIterator();
            //ciclo que nos recorrera hasta que haya contenido (itera de fila en fila)
            while(rows.hasNext()){
                //se hace un casteo 
                HSSFRow row = (HSSFRow) rows.next();
                //iterador que nos permitira iterar de celda en celda
                Iterator cells = row.cellIterator();
                List data = new ArrayList();
                //ciclo que iterara de celda en celda (itera de columna en columna)
                while(cells.hasNext()){
                    HSSFCell cell = (HSSFCell) cells.next();
                    //se añade la celda al arraylist
                    data.add(cell);
                }
                sheetData.add(data);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }finally{
            if(fis!=null){
                
                fis.close();
            }
        }
        //se hace la llamada al procedimiento para mostrar la informacion 
        //y realizar la insercion de los datos
        System.out.println("Transformado de excel a sql con ids de estaciones y elementos: ");
        transformadoDatosMedicionesBuscandoIds(sheetData,idElemento); 
    }
    
    //muestra la informacion contenida en la hoja de excel
    private void transformadoDatosMedicionesBuscandoIds(List sheetData,int idElemento) throws SQLException{
      //  System.out.println("Iniciando funcin showInformation");
        List c = (List)sheetData.get(0);
        int idStation=0;
        String r = "";
        //ayuda a iterar entre filas
        FileWriter fichero = null;
        PrintWriter pW = null;
        try{
            fichero = new FileWriter(".//dataOutTransformed//DataMeasuresTemp.txt",true);
            pW = new PrintWriter(fichero);
            
            for(int columna=2; columna<c.size();columna++){
                for (int fila = 0; fila < sheetData.size(); fila++) {
                    List list = (List) sheetData.get(fila);
                        Cell fec = (Cell)list.get(0);
                        Cell hr = (Cell)list.get(1);
                        //permite iterar de columna en columna apartir de la columna 2
                        Cell cell = (Cell)list.get(columna);
                        //valida dependiendo el tipo de dato contenido en el excel
                        if(cell.getCellType()==Cell.CELL_TYPE_NUMERIC){
                            if(HSSFDateUtil.isCellDateFormatted(cell)){}else{
                                //System.out.println(fec.getDateCellValue().toLocaleString().substring(0, 10)+"\t"+hr.getNumericCellValue()+"\t"+cell.getNumericCellValue()+"\t"+idElemento+"\t"+idStation);
                                pW.print(","+idStation+","+idElemento+","+cell.getNumericCellValue()+","
                                        +fec.getDateCellValue().toLocaleString().substring(0, 10)+","+
                                        (int)hr.getNumericCellValue()+"\n");                            
                            }
                        } else if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
                                idStation =daoMysql.findByIdEstacion(cell.getRichStringCellValue()+"");
                        }
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           if (null != fichero){
               
               fichero.close();
              }
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }
       // escribeTXT(r);    
       
    }

   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RunUIAirQDTransformXLStoSQL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RunUIAirQDTransformXLStoSQL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RunUIAirQDTransformXLStoSQL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RunUIAirQDTransformXLStoSQL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RunUIAirQDTransformXLStoSQL().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar cargandoScript;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
